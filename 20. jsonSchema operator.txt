Note 📝: jsonSchema operator is use to define the schema of the collection field. 
In this example the contact_no is saved in string as well as double format. 
We can find the double format contact_no with the help of jsonSchema operator.
--------------------------------------------------------------------------------

[✔️] graphicoder> db.studentDetails.insertMany([
... {name: "A", contact_no: "1233445"},
... {name: "B", contact_no: 123456}
... ]);
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId("64d4899f5c69d68dafe65a5d"),
    '1': ObjectId("64d4899f5c69d68dafe65a5e")
  }
}
[✔️] graphicoder> db.studentDetails.find().pretty();
[
  {
    _id: ObjectId("64d4899f5c69d68dafe65a5d"),
    name: 'A',
    contact_no: '1233445'
  },
  {
    _id: ObjectId("64d4899f5c69d68dafe65a5e"),
    name: 'B',
    contact_no: 123456
  }
]


[✔️] graphicoder> db.studentDetails.find({$jsonSchema: {required: ["contact_no"], properties: {contact_no: {bsonType: "double"}}}});

[✔️] graphicoder> db.studentDetails.find().pretty();
[
  {
    _id: ObjectId("64d4899f5c69d68dafe65a5d"),
    name: 'A',
    contact_no: '1233445'
  },
  {
    _id: ObjectId("64d4899f5c69d68dafe65a5e"),
    name: 'B',
    contact_no: 123456
  }
]
[✔️] graphicoder> db.studentDetails.find({$jsonSchema:{required:["contact_no"],properties:{contact_no:{bsonType:"double"}}}});